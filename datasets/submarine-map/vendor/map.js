// Generated by CoffeeScript 2.3.2
(function() {
  window.SubmarineCable = {};
  var indexOf = [].indexOf;

  SubmarineCable.Map = (function() {
    class Map {
      landingIcon() {
        return {
          url: '/assets/images/marker.png',
          size: new google.maps.Size(10, 10),
          anchor: new google.maps.Point(5, 5)
        };
      }

      showCables() {
        this.cables = new google.maps.Data({
          map: this.gmap
        });
        this.cables.loadGeoJson(SubmarineCable.Map.cablesGeoJSON);
        return this.cables.setStyle((feature) => {
          return {
            strokeColor: `#${feature.getProperty("color")}`,
            strokeWeight: 2
          };
        });
      }

      showLandingPoints() {
        this.landings = new google.maps.Data({
          map: this.gmap
        });
        this.landings.loadGeoJson(SubmarineCable.Map.landingsGeoJSON);
        return this.landings.setStyle({
          icon: this.landingIcon()
        });
      }

      selectCable(id, desc, is_map_clicked = false) {
        this.infoBox.close();
        this.cables.setStyle((feature) => {
          if (feature.getProperty("slug") === id) {
            return {
              strokeColor: "#a81120",
              strokeOpacity: 1
            };
          } else {
            return {
              strokeColor: `#${feature.getProperty("color")}`,
              strokeOpacity: 0.1
            };
          }
        });
        this.landings.setStyle((feature) => {
          var d, ref;
          if (ref = feature.getProperty("id"), indexOf.call((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = desc.length; i < len; i++) {
              d = desc[i];
              results.push(d.landing_point_id);
            }
            return results;
          })(), ref) >= 0) {
            return {
              icon: this.landingIcon()
            };
          } else {
            return {
              icon: this.landingIcon(),
              visible: false
            };
          }
        });
        return this.boundMap(desc);
      }

      selectCountry(cables, landing_points, latlons) {
        this.infoBox.close();
        this.cables.setStyle((feature) => {
          var d, ref;
          if (ref = feature.getProperty("slug"), indexOf.call((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = cables.length; i < len; i++) {
              d = cables[i];
              results.push(d.id);
            }
            return results;
          })(), ref) >= 0) {
            return {
              strokeColor: `#${feature.getProperty("color")}`,
              strokeOpacity: 1
            };
          } else {
            return {
              strokeColor: `#${feature.getProperty("color")}`,
              strokeOpacity: 0.1
            };
          }
        });
        this.landings.setStyle((feature) => {
          var d, ref;
          if (ref = feature.getProperty("id"), indexOf.call((function() {
            var i, len, results;
            results = [];
            for (i = 0, len = landing_points.length; i < len; i++) {
              d = landing_points[i];
              results.push(d.landing_point_id);
            }
            return results;
          })(), ref) >= 0) {
            return {
              icon: this.landingIcon()
            };
          } else {
            return {
              icon: this.landingIcon(),
              visible: false
            };
          }
        });
        return this.boundMap(latlons);
      }

      selectRfs(data) {
        this.infoBox.close();
        this.cables.setStyle((feature) => {
          var d, ref;
          if (ref = feature.getProperty("slug"), indexOf.call((function() {
            var i, len, ref1, results;
            ref1 = data.cables;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              d = ref1[i];
              results.push(d.id);
            }
            return results;
          })(), ref) >= 0) {
            return {
              strokeColor: `#${feature.getProperty("color")}`,
              strokeOpacity: 1
            };
          } else {
            return {
              strokeColor: `#${feature.getProperty("color")}`,
              strokeOpacity: 0.1
            };
          }
        });

        return this.landings.setStyle((feature) => {
          var d, ref;
          if (ref = feature.getProperty("id"), indexOf.call((function() {
            var i, len, ref1, results;
            ref1 = data.landing_points;
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              d = ref1[i];
              results.push(d.landing_point_id);
            }
            return results;
          })(), ref) >= 0) {
            return {
              icon: this.landingIcon()
            };
          } else {
            return {
              icon: this.landingIcon(),
              visible: false
            };
          }
        });
      }

      boundMap(desc) {
        var bounds, i, len, value;
        bounds = new google.maps.LatLngBounds();
        for (i = 0, len = desc.length; i < len; i++) {
          value = desc[i];
          bounds.extend(new google.maps.LatLng(value.latlon.split(',')[0], value.latlon.split(',')[1]));
        }
        this.gmap.fitBounds(bounds);
        if (this.gmap.getZoom() > 5) {
          return this.gmap.setZoom(this.gmap.getZoom() - 2);
        }
      }

      selectLandingPoint(name, latLng) {
        this.cables.setStyle((feature) => {
          return {
            strokeColor: `#${feature.getProperty("color")}`,
            strokeOpacity: 1
          };
        });
        this.landings.setStyle((feature) => {
          return {
            icon: this.landingIcon()
          };
        });
        this.infoBox.close();
        this.gmap.panTo(latLng);
        this.infoBox.setContent(`<div class="infoBoxContent"><div class="infoBoxPointer"></div>${name}</div>`);
        this.infoBox.setPosition(latLng);
        return this.infoBox.open(this.gmap);
      }

      resetMap() {
        this.cables.setStyle((feature) => {
          return {
            strokeColor: `#${feature.getProperty("color")}`,
            strokeOpacity: 1
          };
        });
        this.landings.setStyle((feature) => {
          return {
            icon: this.landingIcon()
          };
        });
        return this.infoBox.close();
      }

      resetBounds() {
        this.gmap.setZoom(2);
        return this.gmap.setCenter(new google.maps.LatLng(30.0, -30.0));
      }

      setEvents() {
        google.maps.event.addListener(this.gmap, 'click', (event) => {
          return jQuery(location).attr('href', "#/");
        });
        this.cables.addListener('click', (event) => {
          return jQuery(location).attr('href', `#/submarine-cable/${event.feature.getProperty('slug')}`);
        });
        return this.landings.addListener('click', (event) => {
          return jQuery(location).attr('href', `#/landing-point/${event.feature.getProperty('slug')}`);
        });
      }

      isMobile() {
        var error;
        try {
          return window.matchMedia("only screen and (max-width:736px)").matches;
        } catch (error1) {
          error = error1;
          return false;
        }
      }

      analytics(category, action, label) {}

      // _gaq.push(['_trackEvent', category, action, label]) if _gaq
      constructor(element, config) {
        this.element = element;
        this.config = config;
        this.creation_time = this.config.creation_time;
        this.gmap = new google.maps.Map(document.getElementById(this.element), {
          zoom: this.isMobile() ? 1 : 3,
          maxZoom: 8,
          minZoom: 2,
          mapTypeId: google.maps.MapTypeId.ROADMAP,
          styles: SubmarineCable.Map.mapStyles,
          center: new google.maps.LatLng(30.0, -30.0),
          streetViewControl: false,
          mapTypeControl: false,
          zoomControlOptions: {
            position: google.maps.ControlPosition.TOP_LEFT
          },
          disableDefaultUI: this.isMobile() ? true : false
        });
        this.infoBox = new InfoBox({
          closeBoxURL: "",
          alignBottom: true,
          pixelOffset: new google.maps.Size(-60, -15)
        });
        this.showCables();
        this.showLandingPoints();
        this.setEvents();
        return this;
      }

    };

    Map.cablesGeoJSON = "/api/v2/cable/cable-geo.json";

    Map.landingsGeoJSON = "/api/v2/landing-point/landing-point-geo.json";

    Map.mapStyles = [
      {
        "featureType": "landscape",
        "stylers": [
          {
            "visibility": "on"
          },
          {
            "color": "#d9d9d9"
          }
        ]
      },
      {
        "featureType": "poi",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "road",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "transit",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.locality",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.neighborhood",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.land_parcel",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "administrative.country",
        "elementType": "labels.text.fill",
        "stylers": [
          {
            "color": "#000000"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "featureType": "administrative.province",
        "stylers": [
          {
            "visibility": "off"
          }
        ]
      },
      {
        "featureType": "water",
        "elementType": "geometry.fill",
        "stylers": [
          {
            "color": "#ffffff"
          },
          {
            "visibility": "on"
          }
        ]
      },
      {
        "elementType": "labels.text.fill",
        "stylers": [
          {
            "color": "#808080"
          }
        ]
      }
    ];

    return Map;

  }).call(this);

}).call(this);
